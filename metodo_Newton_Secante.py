# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b4RhQgdtFUD7-ocl25Hodk9L8bM8IsA_
"""

from math import *
import numpy as np
import matplotlib . pyplot as plt
def funcion1(x):
    return np.exp(x) + 2**(-x)+ 2*cos(x)-6
def d1(x):
    return np.exp(x) - (np.log(2)/( 2**(x))) -2*sin(x)

# Ingreso datos de entrada para los diferentes métodos a trabajar
a = 1
b = 2

# guarda valores iniciales
p0=1.1

#guarda valores iniciales del error y del número de iteraciones
tol = 0.000001  #float(input("Ingrese el valor de la tolerancia: "))
nmax = 20 #float(input("Ingrese el número máximo de iteraciones: "))
error = 100
niter = 0
# Método de  Newton

#Evaluacion de la función en los puntos a, b y m

i=1
print("# iter  \t\t P  \t\t error")
print("{0} \t\t {1:6.4f}  \t {2:6.4f}".format(i, p0, error ))

# ciclo iterativo
while error > tol and i <= nmax:
    fa=funcion1(p0)  
    da=d1()
    p = p0 - (fa/da)
    error = abs(p - p0)

    p0=p
    
    i += 1
    print("{0} \t\t {1:6.6f} \t {2:6.6f}".format(i, p,error ))

print("La raíz de la función dada en el intervalo [{0:6.4f},{1:6.4f}] es {2:6.7f}".format(a,b,p))